@page "/fetch-accounts"
@using BankBlazor.Client.Models
@inject HttpClient Http

<h3>Account Profile</h3>

@if (accounts is null)
{
    <p><em>Loading accounts…</em></p>
}
else
{
    <InputSelect @bind-Value="selectedAccountId" class="form-select mb-3">
        <option value="">-- Choose account --</option>
        @foreach (var acc in accounts)
        {
            <option value="@acc.AccountId">
                @($"ID {acc.AccountId} – {acc.Balance} kr")
            </option>
        }
    </InputSelect>
}

@if (selectedAccountId.HasValue)
{
    @if (selectedTx is null)
    {
        <p><em>Loading transactions…</em></p>
    }
    else if (!selectedTx.Any())
    {
        <p><em>No transactions for this account.</em></p>
    }
    else
    {
        <h4>Transactions</h4>
        <ul class="list-group">
            @foreach (var tx in selectedTx)
            {
                <li class="list-group-item">
                    @tx.TransactionDate.ToLocalTime():g
                    — @tx.Type
                    — @tx.Amount kr
                </li>
            }
        </ul>
    }
}

@code {
    private AccountDto[]? accounts;
    private TransactionDto[]? selectedTx;
    private int? selectedAccountId;

    protected override async Task OnInitializedAsync()
    {
        accounts = await Http.GetFromJsonAsync<AccountDto[]>("api/accounts");
    }

    // Autokörs av @bind-Value
    private async Task OnAccountChanged(ChangeEventArgs _)
    {
        if (selectedAccountId.HasValue)
        {
            selectedTx = await Http.GetFromJsonAsync<TransactionDto[]>($"api/accounts/{selectedAccountId}/transactions");
        }
        else
        {
            selectedTx = null;
        }
    }
}
