@page "/transactions"
@using BankBlazor.Client.Models
@inject HttpClient Http

<h3>Transactions</h3>

@if (accounts == null)
{
    <p>Loading accounts...</p>
}
else
{
    <label>Select account:</label>
    <select @onchange="OnAccountChanged" class="form-select mb-4">
        <option value="">-- Choose account --</option>
        @foreach (var acc in accounts)
        {
            <option value="@acc.AccountId">
                @($"ID {acc.AccountId} – Balance {acc.Balance} kr")
            </option>
        }
    </select>
}

@if (transactions != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Type</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tx in transactions)
            {
                <tr>
                    <td>@tx.TransactionDate.ToLocalTime():g</td>
                    <td>@tx.Type</td>
                    <td>@tx.Amount kr</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private AccountDto[]? accounts;
    private TransactionDto[]? transactions;

    protected override async Task OnInitializedAsync()
    {
        // Hämta alla konton
        accounts = await Http.GetFromJsonAsync<AccountDto[]>("api/accounts");
    }

    private async Task OnAccountChanged(ChangeEventArgs e)
    {
        var val = e.Value?.ToString();
        if (int.TryParse(val, out var accountId))
        {
            // Hämta transaktioner för valt konto
            transactions = await Http.GetFromJsonAsync<TransactionDto[]>($"api/accounts/{accountId}/transactions");
        }
        else
        {
            transactions = null;
        }
    }
}
